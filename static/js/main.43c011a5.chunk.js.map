{"version":3,"sources":["view/App/Side.jsx","view/App/Breadcrumb.jsx","view/App/App.js","serviceWorker.js","store/reducers.js","store/index.js","index.js"],"names":["SubMenu","Menu","Sider","Layout","useState","dftSelectedKeys","width","style","background","mode","defaultSelectedKeys","defaultOpenKeys","height","borderRight","key","title","type","Item","margin","Header","Content","Item2","App","className","Side","padding","Breadcrumb","minHeight","path","component","exact","Boolean","window","location","hostname","match","createRootReducer","history","combineReducers","router","connectRouter","createHashHistory","preloadedState","store","createStore","compose","applyMiddleware","routerMiddleware","moment","locale","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAGQA,EAAYC,IAAZD,QACAE,EAAUC,IAAVD,MAEO,aAAa,IAAD,EACuBE,mBAAS,CAAC,MADjC,mBAChBC,EADgB,UAEvB,OAAQ,kBAACH,EAAD,CAAOI,MAAO,IAAKC,MAAO,CAAEC,WAAY,SAC5C,kBAAC,IAAD,CACIC,KAAK,SACLC,oBAAqBL,EACrBM,gBAAiB,CAAC,QAClBJ,MAAO,CAAEK,OAAQ,OAAQC,YAAa,IAEtC,kBAACb,EAAD,CACIc,IAAI,OACJC,MAAO,8BAAM,kBAAC,IAAD,CAAMC,KAAK,SAAjB,aAEP,kBAAC,IAAKC,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,YAEJ,kBAACd,EAAD,CACIc,IAAI,OACJC,MAAO,8BAAM,kBAAC,IAAD,CAAMC,KAAK,WAAjB,aAEP,kBAAC,IAAKC,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,KAAf,YAEJ,kBAACd,EAAD,CACIc,IAAI,OACJC,MAAO,8BAAM,kBAAC,IAAD,CAAMC,KAAK,iBAAjB,aAEP,kBAAC,IAAKC,KAAN,CAAWH,IAAI,KAAf,WACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,MAAf,YACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,MAAf,YACA,kBAAC,IAAKG,KAAN,CAAWH,IAAI,MAAf,gB,SCtCD,aACX,OACI,kBAAC,IAAD,CAAYP,MAAO,CAAEW,OAAQ,WACzB,kBAAC,IAAWD,KAAZ,aACA,kBAAC,IAAWA,KAAZ,aACA,kBAAC,IAAWA,KAAZ,cCSJE,EAAoBhB,IAApBgB,OAAQC,EAAYjB,IAAZiB,QAEhB,SAASH,IACP,OAAQ,sCAEV,SAASI,IACP,OAAQ,sCA+BKC,MA7Bf,WACE,OACE,kBAAC,IAAD,CAAQf,MAAO,CAAE,OAAU,SACzB,kBAACY,EAAD,CAAQI,UAAU,UAChB,yBAAKA,UAAU,UAEjB,kBAAC,IAAD,KAEE,kBAACC,EAAD,MACA,kBAAC,IAAD,CAAQjB,MAAO,CAAEkB,QAAS,gBAExB,kBAACC,EAAD,MACA,kBAACN,EAAD,CACEb,MAAO,CACLC,WAAY,OACZiB,QAAS,GACTP,OAAQ,EACRS,UAAW,MAGb,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWZ,EAAMa,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,OAAOC,UAAWR,S,+BCjCtBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCNSC,EAJW,SAACC,GAAD,OAAaC,YAAgB,CACnDC,OAAQC,YAAcH,MCGbA,EAAUI,cCEvB,IDAuCC,ECAjCC,EDCUC,YACZR,EAAkBC,GAClBK,EACAG,YACEC,YACEC,YAAiBV,MCLzBW,IAAOC,OAAO,SACdC,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,IAAD,CAAiBN,QAASA,GAA1B,IAOI,kBAAC,EAAD,QAGRe,SAASC,eAAe,SHuGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.43c011a5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Sider } = Layout;\r\n\r\nexport default function () {\r\n    const [dftSelectedKeys, setDftSelectedKeys] = useState([\"1\"])\r\n    return (<Sider width={200} style={{ background: '#fff' }}>\r\n        <Menu\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={dftSelectedKeys}\r\n            defaultOpenKeys={['sub1']}\r\n            style={{ height: '100%', borderRight: 0 }}\r\n        >\r\n            <SubMenu\r\n                key=\"sub1\"\r\n                title={<span><Icon type=\"user\" />subnav 1</span>}\r\n            >\r\n                <Menu.Item key=\"1\">option1</Menu.Item>\r\n                <Menu.Item key=\"2\">option2</Menu.Item>\r\n                <Menu.Item key=\"3\">option3</Menu.Item>\r\n                <Menu.Item key=\"4\">option4</Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu\r\n                key=\"sub2\"\r\n                title={<span><Icon type=\"laptop\" />subnav 2</span>}\r\n            >\r\n                <Menu.Item key=\"5\">option5</Menu.Item>\r\n                <Menu.Item key=\"6\">option6</Menu.Item>\r\n                <Menu.Item key=\"7\">option7</Menu.Item>\r\n                <Menu.Item key=\"8\">option8</Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu\r\n                key=\"sub3\"\r\n                title={<span><Icon type=\"notification\" />subnav 3</span>}\r\n            >\r\n                <Menu.Item key=\"9\">option9</Menu.Item>\r\n                <Menu.Item key=\"10\">option10</Menu.Item>\r\n                <Menu.Item key=\"11\">option11</Menu.Item>\r\n                <Menu.Item key=\"12\">option12</Menu.Item>\r\n            </SubMenu>\r\n        </Menu>\r\n    </Sider>)\r\n}\r\n","import {  Breadcrumb } from 'antd';\r\nimport React from 'react';\r\nexport default function () {\r\n    return (\r\n        <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n    )\r\n}","/*\n * @Author: your name\n * @Date: 2020-01-27 15:59:49\n * @LastEditTime : 2020-01-28 22:11:18\n * @LastEditors  : Please set LastEditors\n * @Description: 公共首页\n * @FilePath: \\fullonce\\src\\App.js\n */\nimport React from 'react';\nimport './App.css';\nimport { Layout, Menu } from 'antd';\nimport { Route } from 'react-router-dom'\n\nimport Side from './Side.jsx'\nimport Breadcrumb from './Breadcrumb.jsx'\n\nconst { Header, Content } = Layout;\n\nfunction Item() {\n  return (<div>11111</div>)\n}\nfunction Item2() {\n  return (<div>22222</div>)\n}\nfunction App() {\n  return (\n    <Layout style={{ 'height': '100%' }}>\n      <Header className=\"header\">\n        <div className=\"logo\" />\n      </Header>\n      <Layout>\n        {/* 侧边导航 */}\n        <Side />\n        <Layout style={{ padding: '0 24px 24px' }}>\n          {/* 面包屑 */}\n          <Breadcrumb />\n          <Content\n            style={{\n              background: '#fff',\n              padding: 24,\n              margin: 0,\n              minHeight: 280,\n            }}\n          >\n            <Route path=\"/\" component={Item} exact />\n            <Route path=\"/two\" component={Item2} />\n          </Content>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// reducers.js\r\nimport {\r\n    combineReducers\r\n} from 'redux'\r\nimport {\r\n    connectRouter\r\n} from 'connected-react-router'\r\n\r\nconst createRootReducer = (history) => combineReducers({\r\n    router: connectRouter(history),\r\n     // rest of your reducers\r\n})\r\nexport default createRootReducer","/*\r\n * @Author: your name\r\n * @Date: 2020-01-28 22:01:37\r\n * @LastEditTime : 2020-01-28 22:14:01\r\n * @LastEditors  : Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\fullonce\\src\\store\\index.js\r\n */\r\nimport { createHashHistory } from 'history'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport createRootReducer from './reducers'\r\nexport const history = createHashHistory()\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    createRootReducer(history), // root reducer with router state\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(\r\n        routerMiddleware(history), // for dispatching history actions\r\n        // ... other middlewares ...\r\n      ),\r\n    ),\r\n  )\r\n\r\n  return store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './view/App/App';\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { Route, Switch } from 'react-router' // react-router v4/v5\nimport { ConnectedRouter } from 'connected-react-router'\nimport configureStore, { history } from './store/'\nconst store = configureStore(/* provide initial state if any */)\nmoment.locale('zh-cn');\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}> { /* place ConnectedRouter under Provider */}\n            {/* <>\n                <Switch>\n                    <Route exact path=\"/\" render={() => (<div>Match</div>)} />\n                    <Route render={() => (<div>Miss</div>)} />\n                </Switch>\n            </> */}\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}